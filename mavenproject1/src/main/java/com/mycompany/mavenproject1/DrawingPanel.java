/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.mavenproject1;

import com.mycompany.mavenproject1.DrawingEngine;
import com.mycompany.mavenproject1.AbstractShape;
import com.mycompany.mavenproject1.Node;
import com.mycompany.mavenproject1.Shape;
    import java.awt.Graphics;
import java.awt.Point;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;


public class DrawingPanel extends javax.swing.JPanel implements DrawingEngine,Node {

    ArrayList<Shape> shapes = new ArrayList<>();

    int selected_Index = -1;
    Node parent;
    int flag=0;
     String flagNumber=null;

    /**
     * Creates new form DrawingAreaPanel
     */
    public DrawingPanel() {
        initComponents();
    }

    @Override
    public void addShape(Shape shape) {
        shapes.add(shape);
    }

    @Override
    public void removeShape(Shape shape) {
        shapes.remove(shape);
    }
   

    @Override
    public Shape[] getShapes() {
        Shape s[] = new Shape[shapes.size()];
        for (int i = 0; i < shapes.size(); i++) {
            s[i] = shapes.get(i);
        }
        return s;
    }

    @Override
    public void refresh(Graphics g) {
        for (int i = 0; i < shapes.size(); i++) {
            shapes.get(i).draw(g);
        }
        
       repaint();
    }
   
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        refresh(g);
       
    
    }
    public void save (Path path ){
        JSONArray jo=new JSONArray();
        for(int i=0;i<shapes.size();i++){
            jo.add(shapes.get(i).toJSONObject());
            
            
        }
        
        String jsonText=jo.toString();
        try {
            Files.write(path,jsonText.getBytes(),StandardOpenOption.CREATE);
        } catch (IOException ex) {
            System.out.println("File cannot be saved");
            ex.printStackTrace();
                  
        }
        
    }
    
    public void load (Path path,JComboBox<String> chooseshape) {
        try {
            String jsonText=null;
            
            try {
                jsonText=new String(Files.readAllBytes(path));
                
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "File not found");
                ex.printStackTrace();
            }
            JSONParser parser=new JSONParser();
            JSONArray ja=(JSONArray)parser.parse(jsonText);
            shapes.clear();
            chooseshape.removeAllItems();
            AbstractShape.noOfLines=0;
            AbstractShape.noOfOvals=0;
            AbstractShape.noOfRectangles=0;
            AbstractShape.noOfTriangles=0;
            chooseshape.addItem("ChooseShape");
            /* try{
            System.out.println("hiii");
            ja=(JSONArray)JSONValue.parse(jsonText);
            }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Ja is null");
            */
            for(Object object:ja){
                JSONObject jo=(JSONObject)object;
                Shape s=AbstractShape.fromJsonObject(jo,chooseshape);
               
                shapes.add(s);
              
                        
            }
            repaint();
            
            
            
        } catch (ParseException ex) {
            Logger.getLogger(DrawingPanel.class.getName()).log(Level.SEVERE,null, ex);
        }
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
     
    }//GEN-LAST:event_formMouseDragged
   

    @Override
    public void setParentNode(Node node) {
      this.parent=node;  
    }

    @Override
    public Node getParentNode() {
       return parent;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
