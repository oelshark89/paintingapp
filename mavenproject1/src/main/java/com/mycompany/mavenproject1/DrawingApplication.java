 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mavenproject1;

import com.mycompany.lab8.LineSegment;
import com.mycompany.lab8.LineSegmentInfo;
import com.mycompany.mavenproject1.AbstractShape;
import com.mycompany.mavenproject1.Moveable;
import com.mycompany.mavenproject1.Node;
import com.mycompany.mavenproject1.Oval;
import com.mycompany.mavenproject1.OvalGui;
import com.mycompany.mavenproject1.Rectangle;
import com.mycompany.mavenproject1.RectangleGui;
import com.mycompany.mavenproject1.Shape;
import com.mycompany.mavenproject1.Triangle;
import com.mycompany.mavenproject1.TriangleGui;
import java.awt.Color;
import java.awt.Point;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.json.simple.parser.JSONParser;

public class DrawingApplication extends javax.swing.JFrame implements Node {

 int selected_Index = -1;
 int resizedIndex = -1;
    private Shape current;
    /**
     * Creates new form VectorDrawingApplicationWindow
     */
    public DrawingApplication() {
        initComponents();
        drawingPanel1.setParentNode(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rectangleButton = new javax.swing.JButton();
        lineSegmentButton = new javax.swing.JButton();
        circleButton = new javax.swing.JButton();
        chooseShape = new javax.swing.JComboBox<>();
        colorizeButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        selectShapeLabel = new javax.swing.JLabel();
        triangleButton = new javax.swing.JButton();
        drawingPanel1 = new com.mycompany.lab8.DrawingPanel();
        copyButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vector Drawing Application");

        rectangleButton.setText("Rectangle");
        rectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleButtonActionPerformed(evt);
            }
        });

        lineSegmentButton.setText("Line Segment");
        lineSegmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineSegmentButtonActionPerformed(evt);
            }
        });

        circleButton.setText("Circle");
        circleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleButtonActionPerformed(evt);
            }
        });

        chooseShape.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Shape" }));
        chooseShape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseShapeActionPerformed(evt);
            }
        });

        colorizeButton.setText("Colorize");
        colorizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(0, 0, 0));
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        selectShapeLabel.setText("Select Shape");

        triangleButton.setText("Triangle");
        triangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleButtonActionPerformed(evt);
            }
        });

        drawingPanel1.setBackground(new java.awt.Color(255, 255, 255));
        drawingPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawingPanel1MouseDragged(evt);
            }
        });
        drawingPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawingPanel1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout drawingPanel1Layout = new javax.swing.GroupLayout(drawingPanel1);
        drawingPanel1.setLayout(drawingPanel1Layout);
        drawingPanel1Layout.setHorizontalGroup(
            drawingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 675, Short.MAX_VALUE)
        );
        drawingPanel1Layout.setVerticalGroup(
            drawingPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 403, Short.MAX_VALUE)
        );

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Save");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Load");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectShapeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(colorizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(chooseShape, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rectangleButton)
                        .addGap(105, 105, 105)
                        .addComponent(lineSegmentButton)
                        .addGap(110, 110, 110)
                        .addComponent(circleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(triangleButton))
                    .addComponent(drawingPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(247, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lineSegmentButton)
                    .addComponent(rectangleButton)
                    .addComponent(circleButton)
                    .addComponent(triangleButton))
                .addGap(18, 18, 18)
                .addComponent(drawingPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
            .addGroup(layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(selectShapeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooseShape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorizeButton)
                    .addComponent(deleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(copyButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lineSegmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineSegmentButtonActionPerformed

        LineSegmentInfo l = new LineSegmentInfo(drawingPanel1, chooseShape,AbstractShape.noOfLines);
        l.setParentNode(this);
        l.setVisible(true);
        this.setVisible(false);
       AbstractShape. noOfLines++;
    }//GEN-LAST:event_lineSegmentButtonActionPerformed

    private void rectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleButtonActionPerformed

        RectangleGui r = new RectangleGui(drawingPanel1, chooseShape, AbstractShape.noOfRectangles);
        r.setParentNode(this);
        r.setVisible(true);
          this.setVisible(false);
        AbstractShape.noOfRectangles++;
    }//GEN-LAST:event_rectangleButtonActionPerformed

    private void circleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleButtonActionPerformed

        OvalGui c = new OvalGui(drawingPanel1, chooseShape, AbstractShape.noOfOvals);
        c.setParentNode(this);
        c.setVisible(true);
        this.setVisible(false);
       AbstractShape. noOfOvals++;
    }//GEN-LAST:event_circleButtonActionPerformed

    private void colorizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeButtonActionPerformed
        try {
            int k = chooseShape.getSelectedIndex() - 1;
            if (k == -1) {
                JOptionPane.showMessageDialog(null, "You haven't selected a shape!");
                return;
            }
            Shape m = drawingPanel1.shapes.get(k);
            String choose = JOptionPane.showInputDialog("Enter Fill Color or Border Color.");
            if (choose.equalsIgnoreCase("Fill Color")) {
                Color fc = JColorChooser.showDialog(null, "Choose color", Color.black);
                m.setFillColor(fc);
                return;
            }
            if (choose.equalsIgnoreCase("Border Color")) {
                Color jc = JColorChooser.showDialog(null, "Choose color", Color.black);
                m.setColor(jc);
                return;
            } else {
                JOptionPane.showMessageDialog(null, "You must enter Fill Color or Border Color!");
            }
            drawingPanel1.repaint();
        } catch (IndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "No shapes to colorize!");
        }
    }//GEN-LAST:event_colorizeButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try {
            int i = chooseShape.getSelectedIndex() - 1;
            drawingPanel1.shapes.remove(i);
            chooseShape.removeItemAt(i + 1);
            drawingPanel1.repaint();
           
        } catch (IndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "No shapes to delete!");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void triangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleButtonActionPerformed
        TriangleGui t = new TriangleGui(drawingPanel1, chooseShape, AbstractShape.noOfTriangles);
        t.setParentNode(this);
        t.setVisible(true);
        this.setVisible(false);
        AbstractShape.noOfTriangles++;
    }//GEN-LAST:event_triangleButtonActionPerformed

    public void setComboBox(int i)
    {
        chooseShape.setSelectedIndex(i);
    }
    
    private void chooseShapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseShapeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chooseShapeActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        
      JFrame parentFrame = new JFrame();
        JFileChooser savefile = new JFileChooser();
        savefile.setDialogTitle("Specify a Location to save");

        int userSelection = savefile.showSaveDialog(parentFrame);
        if(userSelection==JFileChooser.APPROVE_OPTION){
       String fileName=savefile.getSelectedFile().getAbsolutePath();
       
        File file=new File(fileName);
        savefile.setSelectedFile(file);
        drawingPanel1.save(Paths.get(fileName));
        }
        

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        JFileChooser loadFile=new JFileChooser();
        loadFile.showOpenDialog(loadFile);
        String fileName=loadFile.getSelectedFile().getAbsolutePath();
       
       
            try {
                FileReader reader = new FileReader(fileName);
                drawingPanel1.load(Paths.get(fileName),chooseShape);
                for(int i=0;i<drawingPanel1.shapes.size();i++){
                   
                    
                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Cannot read from file");
            }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        // TODO add your handling code here:
       int i=chooseShape.getSelectedIndex()-1;
       Shape shape=drawingPanel1.shapes.get(i);
       if(shape instanceof Oval){
      Oval oval=(Oval) ((Oval)drawingPanel1.shapes.get(i)).copy(chooseShape, drawingPanel1.shapes.get(i));
         drawingPanel1.addShape((Shape)oval);
         
       }
       else if(shape instanceof Rectangle){
               
       Rectangle rectangle=(Rectangle) ((Rectangle)shape).copy(chooseShape, shape);
       drawingPanel1.addShape((Shape)rectangle);
       }
       else  if(shape instanceof LineSegment){
           LineSegment line=(LineSegment)((LineSegment)shape).copy(chooseShape, shape);
           drawingPanel1.addShape(line);
           
           
       }
       else if(shape instanceof Triangle){
           Triangle triangle =(Triangle )((Triangle)shape).copy(chooseShape, shape);
           drawingPanel1.addShape(triangle);
           
       }
      drawingPanel1.repaint();
    }//GEN-LAST:event_copyButtonActionPerformed

    private void drawingPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanel1MousePressed
         if (chooseShape.getSelectedIndex()==0){for ( int i =this.drawingPanel1.shapes.size()-1 ; i >= 0; i--){
               drawingPanel1.shapes.get(i).setSelected(false);}}
        Point p = evt.getPoint();
        int c = chooseShape.getSelectedIndex();
           if (c != 0) {
            current = drawingPanel1.shapes.get(c-1);
     if (current instanceof Rectangle) {
                Rectangle r = (Rectangle) current;
                if (r.isUpperLeft(p)||r.isUpperRight(p)||r.isLowerRight(p)||r.isLowerLeft(p)) {
                    r.setDraggingPoint(p);
                    resizedIndex = c-1;
                    return;
                }
            }
      if (current instanceof Oval) {
                Oval o = (Oval) current;
                if (o.isUpperLeft(p)||o.isUpperRight(p)||o.isLowerRight(p)||o.isLowerLeft(p)) {
                    o.setDraggingPoint(p);
                    resizedIndex = c-1;
                    return;
                }
            }
  if (current instanceof LineSegment)
        {
        LineSegment l = (LineSegment) current;
             if(l.isStartPoint(p)||l.isEndPoint(p))
             {
               l.setDraggingPoint(p);
               resizedIndex = c-1;
                    return;
             }
        }
  if (current instanceof Triangle)
         {
       Triangle T = (Triangle)current;
         if(T.isPoint1(p)|| T.isPoint2(p)||T.isPoint3(p)) 
             {
               T.setDraggingPoint(p);
               resizedIndex = c-1;
                    return;
             }
         }
        }
        resizedIndex = -1;
        for (int i =this.drawingPanel1.shapes.size()-1 ; i >= 0; i--) {
            if (((Moveable)drawingPanel1.shapes.get(i)).contains(evt.getPoint())){
                chooseShape.setSelectedIndex(i+1);
                drawingPanel1.shapes.get(i).setSelected(true);
                ((Moveable)this.drawingPanel1.shapes.get(i)).setDraggingPoint(evt.getPoint());
                return;
            } 
            chooseShape.setSelectedIndex(0);
     
    }                               
    }//GEN-LAST:event_drawingPanel1MousePressed

    private void drawingPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingPanel1MouseDragged
        Point p = evt.getPoint();
       
        if (resizedIndex != -1) {
          ((Moveable)  drawingPanel1.shapes.get(resizedIndex)).resize(p);
            ((Moveable)drawingPanel1.shapes.get(resizedIndex)).setDraggingPoint(p);
            repaint();
        } else if (chooseShape.getSelectedIndex()!= 0) {
           ((Moveable) this.drawingPanel1.shapes.get(chooseShape.getSelectedIndex()-1)).moveTo(p);
           ((Moveable) this.drawingPanel1.shapes.get(chooseShape.getSelectedIndex()-1)).setDraggingPoint(p);
            repaint();}
    }//GEN-LAST:event_drawingPanel1MouseDragged

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(VectorDrawingApplicationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(VectorDrawingApplicationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(VectorDrawingApplicationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(VectorDrawingApplicationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new VectorDrawingApplicationWindow().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> chooseShape;
    private javax.swing.JButton circleButton;
    private javax.swing.JButton colorizeButton;
    private javax.swing.JButton copyButton;
    private javax.swing.JButton deleteButton;
    private com.mycompany.lab8.DrawingPanel drawingPanel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JButton lineSegmentButton;
    private javax.swing.JButton rectangleButton;
    private javax.swing.JLabel selectShapeLabel;
    private javax.swing.JButton triangleButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setParentNode(Node node) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public Node getParentNode() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
